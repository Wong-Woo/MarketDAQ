name: build-windows

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest]
        include:
          - os: windows-latest
            cmake_generator: "Visual Studio 17 2022"
            cmake_arch: "x64"
            cmake_options: "-DRELEASE=ON"
            build_config: "Release"

    steps:
    - name: Checkout repository including submodules
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install curl (Windows)
      if: runner.os == 'Windows'
      run: choco install curl --yes --force --ignore-checksums

    # (선택 사항) 설치된 curl 경로 확인 (디버깅용)
    # 만약 아래 Configure CMake 단계가 계속 실패하면, 이 단계의 주석을 풀고 실행하여
    # 로그에서 실제 curl 관련 파일들이 어디에 있는지 확인하세요.
    # - name: Check curl installation path
    #   if: runner.os == 'Windows'
    #   run: |
    #     echo "Listing C:/ProgramData/chocolatey/lib/curl contents..."
    #     dir C:/ProgramData/chocolatey/lib/curl /s /b
    #     echo "Listing potential curl tools dir..."
    #     dir C:/ProgramData/chocolatey/lib/curl/tools /s /b
    #   shell: cmd

    - name: Configure CMake
      run: |
        REM --- CMake 설정 시작 ---
        REM choco로 설치된 curl의 경로를 CMAKE_PREFIX_PATH로 지정합니다.
        REM 아래 경로는 일반적인 예시이며, 실제 환경과 다를 수 있습니다.
        REM 'Check curl installation path' 단계의 로그를 보고 정확한 경로로 수정해야 할 수 있습니다.
        REM 보통 'include'와 'lib' 폴더를 포함하는 상위 경로를 지정합니다.

        set CURL_INSTALL_DIR=C:/ProgramData/chocolatey/lib/curl
        REM 만약 위 경로가 틀리다면 아래와 같이 tools 하위 경로 등을 시도해볼 수 있습니다.
        REM set CURL_INSTALL_DIR=C:/ProgramData/chocolatey/lib/curl/tools/curl-xxxx (xxxx는 버전)

        cmake -S . -B build -G "${{ matrix.cmake_generator }}" -A ${{ matrix.cmake_arch }} ${{ matrix.cmake_options }} -DCMAKE_PREFIX_PATH="%CURL_INSTALL_DIR%"

        REM --- CMake 설정 끝 ---
      shell: cmd # cmd 쉘 사용

    - name: Build project
      run: cmake --build build --config ${{ matrix.build_config }}
      shell: cmd

    - name: Upload artifact (Windows)
      if: runner.os == 'Windows' && success()
      uses: actions/upload-artifact@v4
      with:
        name: MarketDAQ-${{ matrix.os }}-${{ matrix.build_config }}
        path: build/${{ matrix.build_config }}/MarketDAQ.exe # 실제 생성된 실행 파일 경로 확인 필요