# .github/workflows/cmake_build.yml

name: CMake Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            cmake_options: "-DRELEASE=ON"
            build_config: "Release"
          - os: macos-latest
            cmake_options: "-DRELEASE=ON"
            build_config: "Release"
          - os: windows-latest
            cmake_options: "-DRELEASE=ON"
            build_config: "Release"

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # --- 의존성 설치 단계 수정 ---
    - name: Install prerequisites (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        # curl과 glfw3 개발 라이브러리 설치 추가
        sudo apt-get install -y libcurl4-openssl-dev libglfw3-dev cmake build-essential

    - name: Install prerequisites (macOS)
      if: runner.os == 'macOS'
      run: |
        brew update
        # curl과 glfw 설치 추가
        brew install curl glfw cmake

    - name: Install prerequisites (Windows)
      if: runner.os == 'Windows'
      run: |
        # curl과 glfw 설치 추가 (choco 사용 예시)
        choco install curl glfw cmake --installargs 'ADD_CMAKE_TO_PATH=System'
        echo "C:\Program Files\CMake\bin;C:\Program Files\Git\cmd;C:\ProgramData\chocolatey\bin;C:\tools\glfw\lib-vc2019" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append # glfw 경로 예시, 실제 경로 확인 필요
        # 참고: Windows에서 choco로 설치된 glfw의 CMake 찾기 경로는 다를 수 있습니다.
        # vcpkg나 직접 빌드를 사용하는 것이 더 안정적일 수 있습니다.

    # --- 이후 단계는 동일 ---
    - name: Configure CMake
      run: |
        cmake -B build ${{ matrix.cmake_options }} -DCMAKE_BUILD_TYPE=${{ matrix.build_config }}

    - name: Build project
      run: cmake --build build --config ${{ matrix.build_config }}

    # ... (아티팩트 업로드 등) ...